---
# All targets that support linting and code analysis.
# DO NOT PUT CLEAN TARGETS or other developer conveniences in here

version: '3'

# Environment variables set for all commands.
env_build: &env_build
  # XDG_CACHE_HOME: This may need to be set for python builds, but try to use
  # virtual env instead.

  # The GOCACHE in a linux container on Docker for windows MUST be on a linuxy
  # file system
  GOCACHE: /tmp/jitsuin/forestrie

vars:

  VERBOSE: ""

tasks:

  all:
    desc: "run all code quality tasks"
    cmds:
      - task: format
      - task: lint

  format:
    desc: "format sources (go fmt)"
    dir: ../go-forestrie
    vars:
      GO_MOD_DIRS:
        sh: find . -type f -name 'go.mod'
    cmds:
      - for: { var: GO_MOD_DIRS}
        cmd: |
          cd $(dirname {{.ITEM}})
          goimports {{.VERBOSE}} -w .
          gofmt -l -s -w .

  lint:
    desc: Quality assurance of **all** code for desktop
    dir: ../go-forestrie
    vars:
      GO_MOD_DIRS:
        sh: find . -type f -name 'go.mod'
      GOLANGCI_LINT_CONFIG: '{{.GOLANGCI_LINT_CONFIG | default ".golangci.yml"}}'
    cmds:
      - for: { var: GO_MOD_DIRS}
        cmd: |
          CONFIG=$(realpath {{.GOLANGCI_LINT_CONFIG}})

          NAME=$(basename $(dirname {{.ITEM}}))
          echo "Linting: $NAME"
          cd $(dirname {{.ITEM}})
          go vet -tags integration,azurite ./...
          golangci-lint --version
          golangci-lint --build-tags integration,azurite -c $CONFIG {{.VERBOSE}} run --timeout 10m ./...

  modules:
    desc: Make all go.mod files consistent
    dir: ../go-forestrie
    vars:
      GO_MOD_DIRS:
        sh: find . -type f -name 'go.mod'
    cmds:
      - for: { var: GO_MOD_DIRS}
        cmd: |
          cd $(dirname {{.ITEM}})
          go mod tidy
          go mod verify
